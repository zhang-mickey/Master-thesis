import torch
import torch.nn as nn
import torch.optim as optim
import json
import cv2
import numpy as np
import sys
import importlib
import os, argparse
import torch.nn.functional as F
from torchvision import transforms, models
from torch.utils.data import Dataset, DataLoader
from torch.utils.data import random_split
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix
import time
from matplotlib import pyplot as plt

# Get the absolute path of the project root
project_root = os.path.abspath(os.path.dirname(__file__) + "/../..")

# Add the project root to sys.path
sys.path.append(project_root)

from lib.dataset.SmokeDataset import *
from lib.dataset.WeaklyDataset import *
from lib.dataset.cropDataset import *
from lib.network.backbone import choose_backbone
from lib.utils.splitdataset import *
from lib.utils.transform import *
from lib.network import *
from lib.loss.loss import *
from inference.inference import *
from lib.utils.metrics import *
from lib.utils.saliencymap import *
from PIL import Image
from lib.utils.pseudo_label import *
from lib.utils.augmentation import *
from lib.utils.image_mask_visualize import *


def parse_args():
    parser = argparse.ArgumentParser(description="Supervised learning")
    # dataset
    parser.add_argument("--json_path", type=str, default=os.path.join(project_root,
                                                                      "smoke-segmentation.v5i.coco-segmentation/test/_annotations.coco.json"),
                        help="Path to COCO annotations JSON file")
    parser.add_argument("--image_folder", type=str,
                        default=os.path.join(project_root, "smoke-segmentation.v5i.coco-segmentation/test/"),
                        help="Path to the image dataset folder")

    parser.add_argument("--non_smoke_image_folder", type=str, default=os.path.join(project_root, "lib/dataset/frames/"),
                        help="Path to the non-smoke image dataset folder")

    parser.add_argument("--save_model_path", type=str,
                        default=os.path.join(project_root, "model/model_classification.pth"),
                        help="Path to save the trained model")

    parser.add_argument("--save_pseudo_labels_path", type=str,
                        default=os.path.join(project_root, "result/pseudo_labels"),

                        help="Path to save the pseudo labels")
    parser.add_argument("--pseudo_labels_path", type=str,
                        default=os.path.join(project_root, "result/pseudo_labels"),
                        help="Path to the pseudo labels generated by classification.py")

    parser.add_argument("--save_cam_path", type=str, default=os.path.join(project_root, "result/cam"),
                        help="Path to save the cam")
    parser.add_argument("--save_visualization_path", type=str,
                        default=os.path.join(project_root, "result/visualization"),
                        help="Path to save the cam")

    parser.add_argument("--smoke5k", type=bool, default=False, help="use smoke5k or not")
    parser.add_argument("--smoke5k_path", type=str, default=os.path.join(project_root, "SMOKE5K/train/"),
                        help="path to smoke5k")

    parser.add_argument("--Rise", type=bool, default=False, help="use Rise non-smoke or not")
    parser.add_argument("--Rise_path", type=str, default=os.path.join(project_root, "Rise/Strong_negative_frames/"),
                        help="path to Rise")

    parser.add_argument("--crop_smoke_image_folder", type=str,
                        default=os.path.join(project_root, "smoke-segmentation.v5i.coco-segmentation/cropped_images/"),
                        help="Path to the cropped smoke image dataset folder")

    parser.add_argument("--crop_mask_folder", type=str,
                        default=os.path.join(project_root, "smoke-segmentation.v5i.coco-segmentation/cropped_masks/"),
                        help="Path to the cropped image dataset mask folder")

    parser.add_argument("--crop_non_smoke_folder", type=str,
                        default=os.path.join(project_root,
                                             "smoke-segmentation.v5i.coco-segmentation/non_smoke_images/"),
                        help="Path to the cropped image dataset mask folder")

    parser.add_argument("--use_crop", type=bool, default=True, help="use cropped image or not")

    # train
    parser.add_argument("--batch_size", type=int, default=8, help="training batch size")

    parser.add_argument("--lr", type=float, default=1e-4, help="learning rate")

    parser.add_argument("--num_epochs", type=int, default=1, help="epoch number")

    parser.add_argument("--img_size", type=int, default=512, help="the size of image")
    parser.add_argument("--num_class", type=int, default=1, help="the number of classes")

    parser.add_argument("--crop_size", default=512, type=int)

    parser.add_argument("--weights_path", required=False, type=str)

    parser.add_argument("--CAM_type", type=str, default='GradCAM',
                        choices=['grad', 'TransCAM', 'TsCAM'],
                        help="CAM type")
    # parser.add_argument("--backbone", type=str, default="transformer",
    #                     help="choose backone")

    # parser.add_argument("--CAM_type", type=str, default='TransCAM',
    #                     choices=['grad', 'TransCAM', 'TsCAM'],
    #                     help="CAM type")

    # parser.add_argument("--backbone", type=str, default="conformer",
    #                     help="choose backone")

    parser.add_argument("--backbone", type=str, default="resnet38d_aff",
                        help="choose backone")

    parser.add_argument('--manual_seed', default=1, type=int, help='Manually set random seed')

    parser.add_argument('--threshold', default=0.3, type=float, help='Threshold for CAM')
    return parser.parse_args()


if __name__ == "__main__":
    print("Starting training...")
    args = parse_args()
    print(vars(args))

    print(torch.cuda.is_available())
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    image_transform, mask_transform = get_transforms(args.img_size)
    # set random seed
    torch.manual_seed(args.manual_seed)
    torch.cuda.manual_seed(args.manual_seed)
    np.random.seed(args.manual_seed)
    random.seed(args.manual_seed)

    train_dataset = PseudoLabelDataset(
        args.crop_smoke_image_folder,
        args.pseudo_labels_path,
        transform=image_transform,
        mask_transform=mask_transform,
    )
    train_loader = DataLoader(train_dataset, batch_size=args.batch_size, shuffle=True)

    # get the test and val with ground truth masks
    test_val_dataset = CropDataset(
        args.crop_smoke_image_folder,
        args.crop_mask_folder,
        transform=image_transform,
        mask_transform=mask_transform,
    )
    total_size = len(test_val_dataset)
    train_size = int(0.8 * total_size)
    val_size = int(0.1 * total_size)
    test_size = total_size - train_size - val_size

    # Split dataset
    train_subset, val_subset, test_subset = random_split(test_val_dataset, [train_size, val_size, test_size])

    # Create DataLoaders
    # train_loader = DataLoader(train_subset, batch_size=args.batch_size, shuffle=True)
    val_loader = DataLoader(val_subset, batch_size=args.batch_size, shuffle=False)
    test_loader = DataLoader(test_subset, batch_size=args.batch_size, shuffle=False)

    print(f"Train size: {len(train_subset)} |Test size: {len(val_subset)} |Test size: {len(test_subset)}")

    model = choose_backbone(args.backbone)
    model = model.to(device)
    model.train()
    criterion = nn.BCEWithLogitsLoss()
    optimizer = optim.Adam(model.parameters(), lr=args.lr)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.7)

    avg_meter = AverageMeter('loss', 'accuracy')
    # max_batches = 2

    if args.backbone == 'resnet38d_aff':
        for epoch in range(1, (args.num_epochs + 1)):
            avg_meter.pop()
            for batch_idx, (images, labels, _, mask) in enumerate(train_loader):
                # if batch_idx >= max_batches:
                #     break  # Stop after two batches
                images, labels = images.to(device), labels.float().to(device)
                mask = mask.to(device)
                optimizer.zero_grad()

                outputs = model.forward(images)

                outputs = outputs.squeeze(1)
                acc = calculate_accuracy(outputs, labels)

                loss = criterion(outputs, labels)
                loss.backward()
                optimizer.step()
                # Update AverageMeter with loss and accuracy
                avg_meter.add({'loss': loss.item(), 'accuracy': acc})
                if batch_idx % 10 == 0:
                    print(
                        f"Epoch [{epoch}/{args.num_epochs}], Batch [{batch_idx}/{len(train_loader)}], Loss: {loss.item():.4f}, Accuracy: {acc:.4f}")
            scheduler.step()
            avg_loss, avg_acc = avg_meter.get('loss', 'accuracy')
            print(f"Epoch [{epoch}/{args.num_epochs}], Loss: {avg_loss:.4f}, Accuracy: {avg_acc:.4f}")
        save_path = os.path.join(
            os.path.dirname(args.save_model_path),
            f"{args.backbone}_{args.CAM_type}_{args.num_epochs}_{os.path.basename(args.save_model_path)}"
        )
        torch.save(model.state_dict(), save_path)
        print("Training complete! Model saved.")

        model.load_state_dict(torch.load(save_path))
        model.eval()
        model.cuda()

        # Infer phase
        print("Starting test phase...")
        test_loss = 0.0
        test_accuracy = 0.0
        test_predictions = []
        test_ground_truth = []
        for batch_idx, (images, labels, image_ids, mask) in enumerate(train_loader):
            # (batchsize,channel,height,width)
            images = images.to(device)  # [B, num_classes]

            masks = masks.to(device)

            # cam_list=[]
            orig_img_size = images.shape[2:]
            iou_sum = 0.0
            total_samples = 0

            with torch.no_grad():
                for i, (img, label, img_id, masks) in enumerate(zip(images, labels, image_ids, masks)):
                    image = img.unsqueeze(0)

                    cams = model.forward_cam(images)
                    cam = F.interpolate(cams, size=orig_img_size,
                                        mode='bilinear', align_corners=False)[0]  # [C, H, W]

                    cam = cam[0]  # [H, W]
                    cam = cam.cpu().numpy()

                    mean = np.array([0.485, 0.456, 0.406])  # Adjust based on your dataset
                    std = np.array([0.229, 0.224, 0.225])  # Adjust based on your dataset

                    img_np = image.cpu().numpy().transpose(1, 2, 0)  # CHW -> HWC
                    img_np = std * img_np + mean  # Denormalize
                    img_np = np.clip(img_np, 0, 1)

                    pseudo_label = (cam > args.threshold).astype(np.float32)
                    # cam_list.append(cam)
                    gt_mask = mask.squeeze().cpu().numpy()
                    gt_mask = (gt_mask > 0.5).astype(np.float32)  # Ensure binary mask

                    intersection = np.logical_and(gt_mask, pseudo_label).sum()
                    union = np.logical_or(gt_mask, pseudo_label).sum()
                    iou = intersection / (union + 1e-8)  # Avoid division by zero
                    iou_sum += iou
                    total_samples += 1
                    fig, ax = plt.subplots(1, 4, figsize=(20, 5))

                    ax[0].imshow(img_np)
                    ax[0].set_title('Original Image')
                    ax[0].axis('off')

                    # CAM visualization
                    ax[1].imshow(cam, cmap='jet')
                    ax[1].set_title('Class Activation Map')
                    ax[1].axis('off')

                    # Pseudo mask
                    ax[2].imshow(pseudo_label, cmap='gray')
                    ax[2].set_title(f'Pseudo Mask (IoU: {iou:.2f})')
                    ax[2].axis('off')

                    # Ground truth mask
                    ax[3].imshow(gt_mask, cmap='gray')
                    ax[3].set_title('Ground Truth Mask')
                    ax[3].axis('off')

                    save_dir = os.path.join(args.save_visualization_path, args.backbone)
                    os.makedirs(save_dir, exist_ok=True)

                    plt.tight_layout()
                    plt.savefig(os.path.join(save_dir, f'visualization_{img_id}.png'), bbox_inches='tight')
                    plt.close()

                    pseudo_label_dir = os.path.join(args.save_pseudo_labels_path, args.backbone)
                    os.makedirs(pseudo_label_dir, exist_ok=True)

                    cv2.imwrite(
                        os.path.join(pseudo_label_dir, f"pseudo_label_{img_id}.png"),
                        (pseudo_label * 255).astype(np.uint8)
                    )

                    heatmap = cv2.applyColorMap(np.uint8(255 * cam), cv2.COLORMAP_JET)
                    cam_dir = os.path.join(args.save_cam_path, args.backbone)
                    os.makedirs(cam_dir, exist_ok=True)

                    cv2.imwrite(
                        os.path.join(cam_dir, f"cam_vis_{img_id}.png"),
                        heatmap
                    )

                # print(f"Batch {batch_idx+1}/{len()} - Current Mean IoU: {iou_sum/total_samples:.4f}")

        # Final statistics
        print(f"\nFinal Mean IoU: {iou_sum / total_samples:.4f} (over {total_samples} samples)")



